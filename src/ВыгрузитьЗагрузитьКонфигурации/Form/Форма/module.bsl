
#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии()
	
	Каталог = ХранилищеОбщихНастроек.Загрузить( "АПК_ВыгрузкаКонфигураций", "Каталог" );
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура КаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = Каталог;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		Каталог = ДиалогОткрытияФайла.Каталог;
		
		Если ЗначениеЗаполнено( Каталог ) Тогда
			
			ХранилищеОбщихНастроек.Сохранить( "АПК_ВыгрузкаКонфигураций", "Каталог", Каталог );
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено( Каталог ) Тогда
		
		ХранилищеОбщихНастроек.Сохранить( "АПК_ВыгрузкаКонфигураций", "Каталог", Каталог );
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено( Каталог ) Тогда
		
		ЗапуститьПриложение( Каталог );
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура Выгрузить(Кнопка)
	
	Если Не ЗначениеЗаполнено( Каталог ) Тогда
		
		Сообщить("Каталог не указан");
		
		Возврат;
		
	КонецЕсли;
	
	проверкаКаталога = Новый Файл( Каталог );
	
	Каталог = проверкаКаталога.ПолноеИмя;
	
	Если Не проверкаКаталога.Существует() Тогда
		
		СоздатьКаталог( Каталог );
		
	КонецЕсли;
	
	Если НайтиФайлы( Каталог, "*.*" ).Количество() > 0 Тогда
		
		Сообщить( "Каталог должен быть пустым" );
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Конфигурации.Ссылка КАК Ссылка,
	|	Конфигурации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Конфигурации КАК Конфигурации
	|ГДЕ
	|	НЕ Конфигурации.ПометкаУдаления";  
	
	выборка = Запрос.Выполнить().Выбрать();
	
	выгружено = 0;
	
	Пока выборка.Следующий() Цикл
		
		Если СтрНачинаетсяС( ВРег( выборка.Наименование ), ВРег( "Удалить_" ) ) Тогда
			Продолжить;
		КонецЕсли;
		
		имяФайла = Каталог + ПолучитьРазделительПути() + выборка.Наименование;
		
		ЗаполнитьXMLФайлСведениямиКонфигурации( выборка, имяФайла + ".xml" );
		ЗаполнитьПараметрыПроверки( выборка, имяФайла + ".json" );
		
		Сообщить("Выгружена: " + выборка.Наименование);
		выгружено = выгружено + 1;
		
	КонецЦикла;
	
	Сообщить( "Выгружено конфигураций: " + выгружено );
	
	ИмпортЭкспортКлиент.ВыгрузитьРегистрВерныхСлов(Каталог + ПолучитьРазделительПути() + "ВерныеСлова.txt");
	
	Сообщить( "Выгружены верные слова" );
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	Если Не ЗначениеЗаполнено( Каталог ) Тогда
		
		Сообщить("Каталог не указан");
		
		Возврат;
		
	КонецЕсли;
	
	файлыКонфигураций = НайтиФайлы( Каталог, "*.xml" );
	
	Для каждого цФайл Из файлыКонфигураций Цикл
		
		файлСПараметрамиПроверки = цФайл.Путь + ПолучитьРазделительПути() + цФайл.ИмяБезРасширения + ".json";
		ПараметрыПроверки = ПолучитьПараметрыПроверки( файлСПараметрамиПроверки );
		
		ОбъектКонфигурации = Неопределено;
		ТекстОшибки = ЗапускИзКоманднойСтроки.ЗаполнитьСведенияОКонфигурацииИзФайлаXML(ОбъектКонфигурации, цФайл.ПолноеИмя, ПараметрыПроверки);
		
		Если ЗначениеЗаполнено( ТекстОшибки ) Тогда
			
			Сообщить( "Возникли ошибки при загрузке из " + цФайл.ПолноеИмя );
			Сообщить( ТекстОшибки );
			
		Иначе
			
			Сообщить( "Загружена конфигурация: " + ОбъектКонфигурации.Наименование );
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмпортЭкспортКлиент.ЗагрузитьРегистрВерныхСлов(Каталог + ПолучитьРазделительПути() + "ВерныеСлова.txt", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьXMLФайлСведениямиКонфигурации(Знач ДанныеКонфигурации, ФайлВыгрузкиСведений)
	
	// Данные реквизиты не не будут выгружены в файл настроек конфигурации.
	МассивРеквизитовИсключений = Новый Массив;
	МассивРеквизитовИсключений.Добавить("КаталогКонфигурации");
	МассивРеквизитовИсключений.Добавить("Пользователь");
	МассивРеквизитовИсключений.Добавить("Пароль");
	МассивРеквизитовИсключений.Добавить("СтрокаЗапускаПлатформы");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлВыгрузкиСведений);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Конфигурация");
	ЗаписьXML.ЗаписатьАтрибут("Наименование", XMLСтрока(ДанныеКонфигурации.Наименование));
	
	РеквизитыКонфигурации = ДанныеКонфигурации.Ссылка.Метаданные().Реквизиты;
	
	// Выгрузка реквизитов конфигурации.
	ЗаписьXML.ЗаписатьНачалоЭлемента("Реквизиты");
	ЗаполнитьЗначенияРеквизитовЭлемента(ЗаписьXML, ДанныеКонфигурации.Ссылка, РеквизитыКонфигурации, МассивРеквизитовИсключений);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Выгрузка стандартных реквизитов конфигурации (выгружаем только наименование).
	ЗаписьXML.ЗаписатьНачалоЭлемента("СтандартныеРеквизиты");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(ДанныеКонфигурации.Наименование));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Выгрузка табличных частей конфигурации.
	ТабличныеЧастиКонфигурации = ДанныеКонфигурации.Ссылка.Метаданные().ТабличныеЧасти;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТабличныеЧасти");
	
	МассивРеквизитовИсключений = Новый Массив;
	
	Для Каждого ТекущийРеквизит Из ТабличныеЧастиКонфигурации Цикл
		ИмяТекущегоРеквизита = ТекущийРеквизит.Имя;
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТекущегоРеквизита);
		ТабличнаяЧасть = ДанныеКонфигурации.Ссылка[ИмяТекущегоРеквизита];
		Для Каждого ТекущаяСтрока Из ТабличнаяЧасть Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("СтрокаТабличнойЧасти");
			ЗаполнитьЗначенияРеквизитовЭлемента(ЗаписьXML, ТекущаяСтрока, ТекущийРеквизит.Реквизиты, МассивРеквизитовИсключений);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Выгрузка требований конфигурации.
	ВыгрузитьТребованияКонфигурации(ДанныеКонфигурации, ЗаписьXML);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовЭлемента(ЗаписьXML, ИсточникЗаполнения, РеквизитыЭлемента,
	МассивРеквизитовИсключений)
	
	Для Каждого ТекущийРеквизит Из РеквизитыЭлемента Цикл
		ИмяТекущегоРеквизита = ТекущийРеквизит.Имя;
		
		Если МассивСодержитЭлемент(МассивРеквизитовИсключений, ИмяТекущегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеРеквизита = ИсточникЗаполнения[ИмяТекущегоРеквизита];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения") Тогда
			ЗначениеРеквизита = ЗначениеВСтрокуВнутр(ЗначениеРеквизита.Получить());
		КонецЕсли;
		
		ЗначениеРеквизитаСтрокой = Строка(ЗначениеРеквизита);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяТекущегоРеквизита);
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(ЗначениеРеквизитаСтрокой));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьТребованияКонфигурации(Знач ДанныеКонфигурации, ЗаписьXML)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТребованияКонфигурации");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТребованияККонфигурации.ВариантПроверки.Наименование КАК ВариантПроверки,
	|	ТребованияККонфигурации.Требование.Наименование КАК ИмяТребования,
	|	ТребованияККонфигурации.Требование.Родитель.Наименование КАК РодительТребования,
	|	ТребованияККонфигурации.Ошибка.Код КАК КодОшибки
	|ИЗ
	|	РегистрСведений.ТребованияККонфигурации КАК ТребованияККонфигурации
	|ГДЕ
	|	ТребованияККонфигурации.Конфигурация = &Конфигурация
	|ИТОГИ ПО
	|	ВариантПроверки,
	|	Требование";
	Запрос.УстановитьПараметр("Конфигурация", ДанныеКонфигурации.Ссылка);
	ВыборкаВариантыПроверки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаВариантыПроверки.Следующий() Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантПроверки");
		ЗаписьXML.ЗаписатьАтрибут("ИмяВарианта", XMLСтрока(ВыборкаВариантыПроверки.ВариантПроверки));
		
		ВыборкаТребования = ВыборкаВариантыПроверки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаТребования.Следующий() Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Требование");
			ЗаписьXML.ЗаписатьАтрибут("Имя", XMLСтрока(ВыборкаТребования.ИмяТребования));
			ЗаписьXML.ЗаписатьАтрибут("Родитель", XMLСтрока(ВыборкаТребования.РодительТребования));
			
			ВыборкаОшибки = ВыборкаТребования.Выбрать();
			Пока ВыборкаОшибки.Следующий() Цикл
				ЗаписьXML.ЗаписатьНачалоЭлемента("КодОшибки");
				ЗаписьXML.ЗаписатьТекст(XMLСтрока(ВыборкаОшибки.КодОшибки));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПроверки(Знач ДанныеКонфигурации, Знач ИмяФайла)

	структ = Новый Структура;
	структ.Вставить("КаталогКонфигурации");
	структ.Вставить("Пользователь");
	структ.Вставить("Пароль");
	структ.Вставить("СтрокаЗапускаПлатформы");
	
	ЗаполнитьЗначенияСвойств( структ, ДанныеКонфигурации.Ссылка );
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл( ИмяФайла );
	ЗаписатьJSON( ЗаписьJSON, структ );
	ЗаписьJSON.Закрыть();

КонецПроцедуры

Функция ПолучитьПараметрыПроверки( Знач ИмяФайла )

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл( ИмяФайла );
	
	данные = ПрочитатьJSON( ЧтениеJSON );
	
	ЧтениеJSON.Закрыть();	
	
	Возврат данные;

КонецФункции

#КонецОбласти







